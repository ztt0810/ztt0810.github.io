<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【目标检测系列】Faster-RCNN网络结构解读与代码分析</title>
      <link href="2021/02/14/cv/faster-rcnn/"/>
      <url>2021/02/14/cv/faster-rcnn/</url>
      
        <content type="html"><![CDATA[<h1 id="【目标检测系列】Faster-RCNN网络结构解读与代码分析"><a href="#【目标检测系列】Faster-RCNN网络结构解读与代码分析" class="headerlink" title="【目标检测系列】Faster-RCNN网络结构解读与代码分析"></a>【目标检测系列】Faster-RCNN网络结构解读与代码分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过R-CNN和Fast RCNN的积淀，由何凯明大神提出的Faster-RCNN，将特征提取（feature extraction），候选框提取（替代了R-CNN与Fast RCNN中比较耗时的<strong>Selective Search</strong>），bbox回归和分类都整合到一个网络中。推理第一阶段先找出图片中待检测物体的anchor矩形框（对背景、待检测物体进行二分类），第二阶段对anchor框内待检测物体进行分类。极大的提升了检测的速度和精度。本文将对<strong>Faster-RCNN</strong>的网络结构进行解读并结合<a href="https://github.com/jwyang/faster-rcnn.pytorch">代码</a>进行分析。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="整体结构图："><a href="#整体结构图：" class="headerlink" title="整体结构图："></a>整体结构图：</h3><p><img src="/2021/02/14/cv/faster-rcnn/v2-c0172be282021a1029f7b72b51079ffe_720w.jpg" alt="img"></p><h3 id="特征提取网络（Backbone"><a href="#特征提取网络（Backbone" class="headerlink" title="特征提取网络（Backbone)"></a>特征提取网络（Backbone)</h3><p>​    Backbone又称骨干网络，用于共享卷积基础层，提取特征（feature map），给后面的RPN和全连接层使用，比较常用的Backbone有ResNet系列，EfficientNet系列，如果对精度的要求比较高，可以考虑这两类网络，如果是移动端对速度的要求比较高，可以使用shuffleNet系列，mobileNet系列，还有最近新出的<a href="https://github.com/DingXiaoH/RepVGG">RepVGG</a>也是一个不错的选择。</p><p>​    而本文代码中使用的是vgg16作为backbone，由于篇幅的原因，且不同的backbone的处理方式会有细微的差别，因此本文对于vgg16的细节不进行展开，后续会有专门的章节介绍backbone(挖坑)</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_init_modules</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line">    vgg = models.vgg16()</span><br><span class="line">   <span class="keyword">if</span> self.pretrained:</span><br><span class="line">        print(<span class="string">&quot;Loading pretrained weights from %s&quot;</span> %(self.model_path))</span><br><span class="line">        state_dict = torch.load(self.model_path)</span><br><span class="line">        vgg.load_state_dict(&#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> state_dict.items() <span class="keyword">if</span> k <span class="keyword">in</span> vgg.state_dict()&#125;)</span><br><span class="line"></span><br><span class="line">    vgg.classifier = nn.Sequential(*<span class="built_in">list</span>(vgg.classifier._modules.values())[:-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># not using the last maxpool layer</span></span><br><span class="line">    self.RCNN_base = nn.Sequential(*<span class="built_in">list</span>(vgg.features._modules.values())[:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​    上面的代码中，作者使用的是torchvision自带的models，去掉了vgg16的最后一层池化层，也就是去掉了降采样，我想原因应该是想提取更多的小尺度特征吧😄</p><h3 id="区域提议网络（Region-Proposal-Network）"><a href="#区域提议网络（Region-Proposal-Network）" class="headerlink" title="区域提议网络（Region Proposal Network）"></a>区域提议网络（Region Proposal Network）</h3><h4 id="网络结构图："><a href="#网络结构图：" class="headerlink" title="网络结构图："></a>网络结构图：</h4><p><img src="/2021/02/14/cv/faster-rcnn/v2-1908feeaba591d28bee3c4a754cca282_720w.jpg" alt="img"></p><p>​    RPN可以说是Faster-RCNN的灵魂所在，传统的<strong>Selective Search</strong>说白了就是穷举，然后对每个区域进行打分，得到与ground truth最接近的目标，相当耗时。而RPN的精妙之处就在于他凭借anchor生成候选框，接着通过softmax区别正负anchor, 然后对正样本进行<strong>边界框回归（Bounding Box Regression）</strong>以修正anchor得到精准的提议框（proposal）后面用于对提议框进行目标分类。</p><p>（看完一长串概念，脑子里必定是一堆问号，什么是anchor？它长啥样？它是怎么生成的？什么是边界框回归？？？此时心中一万只羊驼路过。我说停停，这就给你解释😁）</p><h4 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h4><p>​    其实anchor跟selective search的作用是差不多的，也是为了得到一堆可能包含待检测目标的bounding box。它具体作法是把每个特征点映射回原图的感受野的中心点当成一个基准点，这里面小伙伴们肯定会有疑惑，特征点该怎么映射回原图呢？，首先我们需要明确，特征图是原图经过卷积操作后得到的，而卷积就是卷积核在图片矩阵上进行滑动窗口式遍历操作，原图受卷积核影响的区域被称为感受野，如果我们最后得到的特征图式60*60的，那么在原图上也就对应了60个感受野，我们将感受野的中心作为anchor的基准点，我们假设第一个感受野的中心是（0，0），这就是我们的第一个基准点，接下去的基准点都与前一个基准点相隔base_size个点（base_size指感受野大小），显然最后我们生成了60个基准点，然后围绕这60个基准点选取k个不同scale、aspect ratio的anchor。论文中3个scale（三种面积{128^2，256^2，512^2}），3个aspect ratio( 三种长宽比{1:1，1:2，2:1} )，下图是以一个基准点生成的k（k=9）个anchor，那么剩下的基准点以此类推。</p><p><img src="/2021/02/14/cv/faster-rcnn/v2-9962c78b9963fc323ba04ffb80f0cd95_720w.png" alt="img"></p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enumerate_shifted_anchor</span>(<span class="params">base_anchor, base_size, width, height</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function description: 减少不必要的如generate_base_anchors的计算, 较大的特征图的锚框生成模板, 生成锚框的初选模板即滑动窗口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param base_anchor: 需要reshape的anchors</span></span><br><span class="line"><span class="string">    :param base_size: 特征图的每个像素的感受野大小</span></span><br><span class="line"><span class="string">    :param height: featuremap的高度</span></span><br><span class="line"><span class="string">    :param width: featuremap的宽度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        anchor: 维度为:[width*height*k, 4]的先验框(anchors)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 计算featuremap中每个像素点在原图中感受野上的中心点坐标</span></span><br><span class="line">    shift_x = np.arange(<span class="number">0</span>, width * base_size, base_size)</span><br><span class="line">    shift_y = np.arange(<span class="number">0</span>, height * base_size, base_size)</span><br><span class="line">    shift_x, shift_y = np.meshgrid(shift_x, shift_y)</span><br><span class="line">    print(<span class="string">&#x27;shift_x: &#x27;</span>, shift_x.shape, <span class="string">&#x27;shift_y: &#x27;</span>, shift_y.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># TODO 感觉最正统的方法还是遍历中心点</span></span><br><span class="line">    <span class="comment"># index = 0</span></span><br><span class="line">    <span class="comment"># for x in shift_x:</span></span><br><span class="line">    <span class="comment">#     for y in shift_y:</span></span><br><span class="line">    <span class="comment">#         anchors = generate_base_anchors(center_x=x, center_y=y)</span></span><br><span class="line">    <span class="comment">#         if index == 0:</span></span><br><span class="line">    <span class="comment">#             old_anchors = anchors</span></span><br><span class="line">    <span class="comment">#         else:</span></span><br><span class="line">    <span class="comment">#             anchors = np.concatenate((old_anchors, anchors), axis=0)</span></span><br><span class="line">    <span class="comment">#             old_anchors = anchors</span></span><br><span class="line">    <span class="comment">#         index += 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TODO 直接利用broadcast貌似也可以达到目的</span></span><br><span class="line">    <span class="comment"># shift_x.ravel()表示原地将为一维数组, shift的维度为: [feature_stride, 4]</span></span><br><span class="line">    shift = np.stack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel(),), axis=<span class="number">1</span>)</span><br><span class="line">    A = base_anchor.shape[<span class="number">0</span>]</span><br><span class="line">    K = shift.shape[<span class="number">0</span>]</span><br><span class="line">    anchor = base_anchor.reshape((<span class="number">1</span>, A, <span class="number">4</span>)) + shift.reshape((K, <span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后再合成为所有的先验框, 相当于对featuremap的每个像素点都生成k(9)个先验框(anchors)</span></span><br><span class="line">    anchors = anchor.reshape((K * A, <span class="number">4</span>)).astype(np.float32)</span><br><span class="line">    print(<span class="string">&#x27;result: &#x27;</span>, anchors.shape)</span><br><span class="line">    <span class="keyword">return</span> anchors</span><br></pre></td></tr></table></figure><p>上面的代码中，首先我们需要求出感受点中心对应在原图中的坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shift_x = np.arange(<span class="number">0</span>, width * base_size, base_size)</span><br><span class="line">shift_y = np.arange(<span class="number">0</span>, height * base_size, base_size)</span><br><span class="line">shift_x, shift_y = np.meshgrid(shift_x, shift_y)</span><br></pre></td></tr></table></figure><p>接着我们生成anchors</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shift = np.stack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel(),), axis=<span class="number">1</span>)</span><br><span class="line">A = base_anchor.shape[<span class="number">0</span>]</span><br><span class="line">K = shift.shape[<span class="number">0</span>]</span><br><span class="line">anchor = base_anchor.reshape((<span class="number">1</span>, A, <span class="number">4</span>)) + shift.reshape((K, <span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后再合成为所有的先验框, 相当于对featuremap的每个像素点都生成k(9)个先验框(anchors)</span></span><br><span class="line">anchors = anchor.reshape((K * A, <span class="number">4</span>)).astype(np.float32)</span><br></pre></td></tr></table></figure><p>那么base_anchor（以（0,0）为基准点的第一组anchor）是怎么来的呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify that we compute the same anchors as Shaoqing&#x27;s matlab implementation:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    &gt;&gt; load output/rpn_cachedir/faster_rcnn_VOC2007_ZF_stage1_rpn/anchors.mat</span></span><br><span class="line"><span class="comment">#    &gt;&gt; anchors</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    anchors =</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       -83   -39   100    56</span></span><br><span class="line"><span class="comment">#      -175   -87   192   104</span></span><br><span class="line"><span class="comment">#      -359  -183   376   200</span></span><br><span class="line"><span class="comment">#       -55   -55    72    72</span></span><br><span class="line"><span class="comment">#      -119  -119   136   136</span></span><br><span class="line"><span class="comment">#      -247  -247   264   264</span></span><br><span class="line"><span class="comment">#       -35   -79    52    96</span></span><br><span class="line"><span class="comment">#       -79  -167    96   184</span></span><br><span class="line"><span class="comment">#      -167  -343   184   360</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#array([[ -83.,  -39.,  100.,   56.],</span></span><br><span class="line"><span class="comment">#       [-175.,  -87.,  192.,  104.],</span></span><br><span class="line"><span class="comment">#       [-359., -183.,  376.,  200.],</span></span><br><span class="line"><span class="comment">#       [ -55.,  -55.,   72.,   72.],</span></span><br><span class="line"><span class="comment">#       [-119., -119.,  136.,  136.],</span></span><br><span class="line"><span class="comment">#       [-247., -247.,  264.,  264.],</span></span><br><span class="line"><span class="comment">#       [ -35.,  -79.,   52.,   96.],</span></span><br><span class="line"><span class="comment">#       [ -79., -167.,   96.,  184.],</span></span><br><span class="line"><span class="comment">#       [-167., -343.,  184.,  360.]])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    xrange          <span class="comment"># Python 2</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    xrange = <span class="built_in">range</span>  <span class="comment"># Python 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_anchors</span>(<span class="params">base_size=<span class="number">16</span>, ratios=[<span class="number">0.5</span>, <span class="number">1</span>, <span class="number">2</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">                     scales=<span class="number">2</span>**np.arange(<span class="params"><span class="number">3</span>, <span class="number">6</span></span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Generate anchor (reference) windows by enumerating aspect ratios X</span></span><br><span class="line"><span class="string">    scales wrt a reference (0, 0, 15, 15) window.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    base_anchor = np.array([<span class="number">1</span>, <span class="number">1</span>, base_size, base_size]) - <span class="number">1</span></span><br><span class="line">    ratio_anchors = _ratio_enum(base_anchor, ratios)</span><br><span class="line">    print(<span class="string">f&#x27;ratio_anchors : <span class="subst">&#123;ratio_anchors&#125;</span>&#x27;</span>)</span><br><span class="line">    anchors = np.vstack([_scale_enum(ratio_anchors[i, :], scales)</span><br><span class="line">                         <span class="keyword">for</span> i <span class="keyword">in</span> xrange(ratio_anchors.shape[<span class="number">0</span>])])</span><br><span class="line">    <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_whctrs</span>(<span class="params">anchor</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return width, height, x center, and y center for an anchor (window).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    w = anchor[<span class="number">2</span>] - anchor[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">    h = anchor[<span class="number">3</span>] - anchor[<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">    x_ctr = anchor[<span class="number">0</span>] + <span class="number">0.5</span> * (w - <span class="number">1</span>)</span><br><span class="line">    y_ctr = anchor[<span class="number">1</span>] + <span class="number">0.5</span> * (h - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> w, h, x_ctr, y_ctr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_mkanchors</span>(<span class="params">ws, hs, x_ctr, y_ctr</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Given a vector of widths (ws) and heights (hs) around a center</span></span><br><span class="line"><span class="string">    (x_ctr, y_ctr), output a set of anchors (windows).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    ws = ws[:, np.newaxis]</span><br><span class="line">    hs = hs[:, np.newaxis]</span><br><span class="line">    anchors = np.hstack((x_ctr - <span class="number">0.5</span> * (ws - <span class="number">1</span>),</span><br><span class="line">                         y_ctr - <span class="number">0.5</span> * (hs - <span class="number">1</span>),</span><br><span class="line">                         x_ctr + <span class="number">0.5</span> * (ws - <span class="number">1</span>),</span><br><span class="line">                         y_ctr + <span class="number">0.5</span> * (hs - <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ratio_enum</span>(<span class="params">anchor, ratios</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Enumerate a set of anchors for each aspect ratio wrt an anchor.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    w, h, x_ctr, y_ctr = _whctrs(anchor)</span><br><span class="line">    size = w * h</span><br><span class="line">    size_ratios = size / ratios</span><br><span class="line">    print(<span class="string">f&#x27;size_ratios : <span class="subst">&#123;size_ratios&#125;</span>&#x27;</span>)</span><br><span class="line">    ws = np.<span class="built_in">round</span>(np.sqrt(size_ratios))</span><br><span class="line">    hs = np.<span class="built_in">round</span>(ws * ratios)</span><br><span class="line">    print(<span class="string">f&#x27;ws: <span class="subst">&#123;ws&#125;</span>, hs : <span class="subst">&#123;hs&#125;</span>&#x27;</span>)</span><br><span class="line">    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)</span><br><span class="line">    <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_scale_enum</span>(<span class="params">anchor, scales</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Enumerate a set of anchors for each scale wrt an anchor.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    w, h, x_ctr, y_ctr = _whctrs(anchor)</span><br><span class="line">    <span class="comment"># print(f&#x27;w, h, x_ctr, y_ctr in scale enum: &#123;w, h, x_ctr, y_ctr&#125;&#x27;)</span></span><br><span class="line">    print(<span class="string">f&#x27;scales: <span class="subst">&#123;scales&#125;</span>&#x27;</span>)</span><br><span class="line">    ws = w * scales</span><br><span class="line">    hs = h * scales</span><br><span class="line">    <span class="comment"># print(f&#x27;ws, hs : &#123;ws, hs&#125;&#x27;)</span></span><br><span class="line">    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)</span><br><span class="line">    print(<span class="string">f&#x27;scaled anchor: <span class="subst">&#123;anchors&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    t = time.time()</span><br><span class="line">    all_anchors = generate_anchors()</span><br><span class="line">    print(<span class="string">f&#x27;generated anchor: <span class="subst">&#123;all_anchors&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码中 generate_anchors 主要负责生成anchor，_whctrs负责将坐标转换为（宽，高，中心点x坐标，中心点y坐标），_mkanchors负责将坐标转换为（左上x，左上y，右下x，右下y）也就是anchor的坐标形式，_ratio_enum是根据设置的ratio，生成位于同一中心点面积相等但坐标不同anchor，也就是图中的同色矩形，而_scale_enum则是生成，同比例，但是面积不同的k组anchor，大小由scale决定，面积为base_size * scale.</p><p>到这里，anchor的生成也就结束了。</p><p>得到了先验框，那我们怎么才能筛选出含有目标物体的框呢</p><p>首先我们需要简单的筛选一下，哪些框包含物体，哪些不包含，一个比较直观的方法就是计算bounding box和groud truth 的交并比，也就是我们经常能看到的一个名词<strong>IOU</strong></p><h4 id="IOU"><a href="#IOU" class="headerlink" title="IOU"></a>IOU</h4><p>IOU的定义是bounding box 与ground truth 的交集，比上他俩的并集，一般我们设定当iou大于0.7则认为bounding box 包含了目标，即为正类，当iou小于0.3时我们则认为他是一个负类，意思是不包含目标。</p><p>未完待续。。。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/24916624">https://zhuanlan.zhihu.com/p/24916624</a></p><p><a href="https://zhuanlan.zhihu.com/p/82185598">https://zhuanlan.zhihu.com/p/82185598</a></p><p><a href="https://zhuanlan.zhihu.com/p/31426458">https://zhuanlan.zhihu.com/p/31426458</a></p><p><a href="https://zhuanlan.zhihu.com/p/102978748">https://zhuanlan.zhihu.com/p/102978748</a></p><p><a href="https://blog.csdn.net/cj1561435010/article/details/106649040">https://blog.csdn.net/cj1561435010/article/details/106649040</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Object Detection </tag>
            
            <tag> Two Stage Algorithm </tag>
            
            <tag> anchor based </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用操作合集</title>
      <link href="2021/02/13/tool_operation/git/"/>
      <url>2021/02/13/tool_operation/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用操作"><a href="#Git常用操作" class="headerlink" title="Git常用操作"></a>Git常用操作</h1><h2 id="查看当前分支："><a href="#查看当前分支：" class="headerlink" title="查看当前分支："></a>查看当前分支：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h2 id="查看远程分支："><a href="#查看远程分支：" class="headerlink" title="查看远程分支："></a>查看远程分支：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="更新本地分支："><a href="#更新本地分支：" class="headerlink" title="更新本地分支："></a>更新本地分支：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote update origin --prune</span><br><span class="line">git fetch origin --prune    git branch -a</span><br></pre></td></tr></table></figure><h2 id="切换本地分支（若分支在本地未与orgin同步）："><a href="#切换本地分支（若分支在本地未与orgin同步）：" class="headerlink" title="切换本地分支（若分支在本地未与orgin同步）："></a>切换本地分支（若分支在本地未与orgin同步）：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch name]</span><br></pre></td></tr></table></figure><h2 id="删除远程分支："><a href="#删除远程分支：" class="headerlink" title="删除远程分支："></a>删除远程分支：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branch name]</span><br></pre></td></tr></table></figure><h2 id="删除本地分支（dev分支）："><a href="#删除本地分支（dev分支）：" class="headerlink" title="删除本地分支（dev分支）："></a>删除本地分支（dev分支）：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D dev</span><br></pre></td></tr></table></figure><h2 id="拉取代码（拉取指定分支）："><a href="#拉取代码（拉取指定分支）：" class="headerlink" title="拉取代码（拉取指定分支）："></a>拉取代码（拉取指定分支）：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="拉取代码（与当前分支合并）"><a href="#拉取代码（与当前分支合并）" class="headerlink" title="拉取代码（与当前分支合并）:"></a>拉取代码（与当前分支合并）:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="手动合并（打开merge工具）-："><a href="#手动合并（打开merge工具）-：" class="headerlink" title="手动合并（打开merge工具）  ："></a>手动合并（打开merge工具）  ：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge tool </span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开beyondcompare后左边是当前分支代码，中间是修改前的代码，右边是被合并分支的代码，点击左边箭头进行选择并合并</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/13/tool_operation/git/clipboard.png" alt="img"></p><p><img src="/2021/02/13/tool_operation/git/category.jpg" alt="category"></p><p>删除远端文件（保留本地文件）:</p><p>文件: git rm –cache filename</p><p>文件夹: git rm -r –cache dirname</p><p>创建和删除标签：</p><p>创建：git tag &lt;标签名&gt;</p><p>git push origin &lt;标签名&gt;</p><p>删除：git tag -d &lt;标签名&gt;</p><p>git push origin :refs/tags/标签名</p><p><a href="https://blog.csdn.net/u010324331/article/details/89638643?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/u010324331/article/details/89638643?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p><p>将tag检出的办法：git checkout -b <new branch> <tag name></tag></new></p><p>迁移仓库（从github到gitee)</p><p><a href="https://blog.csdn.net/qq598535550/article/details/87870931">https://blog.csdn.net/qq598535550/article/details/87870931</a></p><p>git remote remove origin</p><p>git remote add origin <a href="https://gitee/com/Ztt./homework.git">https://gitee/com/Ztt./homework.git</a></p><p>git push -u origin master</p>]]></content>
      
      
      <categories>
          
          <category> 工具操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具操作 </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据增强</title>
      <link href="2021/02/12/cv/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E4%B8%8E%E8%AE%AD%E7%BB%83trick/"/>
      <url>2021/02/12/cv/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E4%B8%8E%E8%AE%AD%E7%BB%83trick/</url>
      
        <content type="html"><![CDATA[<h1 id="yolov5中用到的数据增强和trick总结（上）"><a href="#yolov5中用到的数据增强和trick总结（上）" class="headerlink" title="yolov5中用到的数据增强和trick总结（上）"></a>yolov5中用到的数据增强和trick总结（上）</h1><p>yolov5中用到了许多数据增强方法和trick来提高模型精度，如mosaic, cutout, augment imagespace, augment colorspace，augment hsv, 翻转，旋转等</p><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><h3 id="一、Mosaic"><a href="#一、Mosaic" class="headerlink" title="一、Mosaic"></a>一、Mosaic</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Mosaic通过将四张训练图片合并成一张，由此可以提升模型对小目标的检测能力。通常情况下，小目标图片在训练集中的分布并不均匀，这也导致了模型对小样本的学习不够充分，因此在通过mosaic操作后，使得数据集中小目标样本数量得以增加，每张图都有不同程度的缩小，即使没有小目标，通过缩小，原来的目标尺寸也更接近小目标的大小。</p><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mosaic</span>(<span class="params">self, index</span>):</span></span><br><span class="line">    <span class="comment"># loads images in a 4-mosaic</span></span><br><span class="line"><span class="comment"># 将四张图片合并成一张图片</span></span><br><span class="line">    labels4 = []</span><br><span class="line">    s = self.img_size</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在图片中随机选取一个中心点，作为四张图片拼接的中心点, self.mosaic_border = [-img_size // 2, img_size // 2]</span></span><br><span class="line">    yc, xc = [<span class="built_in">int</span>(random.uniform(-x, <span class="number">2</span> * s + x)) <span class="keyword">for</span> x <span class="keyword">in</span> self.mosaic_border]  <span class="comment"># mosaic center x, y</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#随机挑选三张被镶嵌图片，通过indices来索引</span></span><br><span class="line">    indices = [index] + [self. [random.randint(<span class="number">0</span>, self.n - <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]  <span class="comment"># 3 additional image indices</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, index <span class="keyword">in</span> <span class="built_in">enumerate</span>(indices):</span><br><span class="line">        <span class="comment"># Load image，返回图片矩阵，图片宽和高</span></span><br><span class="line">        img, _, (h, w) = load_image(self, index)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># place img in img4 将4张图片合成为一张，分别放在图像的四个位置</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:  <span class="comment"># top left</span></span><br><span class="line">            img4 = np.full((s * <span class="number">2</span>, s * <span class="number">2</span>, img.shape[<span class="number">2</span>]), <span class="number">114</span>, dtype=np.uint8)  <span class="comment"># base image with 4 tiles</span></span><br><span class="line">            x1a, y1a, x2a, y2a = <span class="built_in">max</span>(xc - w, <span class="number">0</span>), <span class="built_in">max</span>(yc - h, <span class="number">0</span>), xc, yc  <span class="comment"># xmin, ymin, xmax, ymax (large image)</span></span><br><span class="line">            x1b, y1b, x2b, y2b = w - (x2a - x1a), h - (y2a - y1a), w, h  <span class="comment"># xmin, ymin, xmax, ymax (small image)</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">1</span>:  <span class="comment"># top right</span></span><br><span class="line">            x1a, y1a, x2a, y2a = xc, <span class="built_in">max</span>(yc - h, <span class="number">0</span>), <span class="built_in">min</span>(xc + w, s * <span class="number">2</span>), yc</span><br><span class="line">            x1b, y1b, x2b, y2b = <span class="number">0</span>, h - (y2a - y1a), <span class="built_in">min</span>(w, x2a - x1a), h</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">2</span>:  <span class="comment"># bottom left</span></span><br><span class="line">            x1a, y1a, x2a, y2a = <span class="built_in">max</span>(xc - w, <span class="number">0</span>), yc, xc, <span class="built_in">min</span>(s * <span class="number">2</span>, yc + h)</span><br><span class="line">            x1b, y1b, x2b, y2b = w - (x2a - x1a), <span class="number">0</span>, w, <span class="built_in">min</span>(y2a - y1a, h)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">3</span>:  <span class="comment"># bottom right</span></span><br><span class="line">            x1a, y1a, x2a, y2a = xc, yc, <span class="built_in">min</span>(xc + w, s * <span class="number">2</span>), <span class="built_in">min</span>(s * <span class="number">2</span>, yc + h)</span><br><span class="line">            x1b, y1b, x2b, y2b = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">min</span>(w, x2a - x1a), <span class="built_in">min</span>(y2a - y1a, h)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#把要合并图片放到大的图片里</span></span><br><span class="line">        img4[y1a:y2a, x1a:x2a] = img[y1b:y2b, x1b:x2b]  <span class="comment"># img4[ymin:ymax, xmin:xmax]</span></span><br><span class="line">        padw = x1a - x1b</span><br><span class="line">        padh = y1a - y1b</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Labels</span></span><br><span class="line">        labels = self.labels[index].copy()</span><br><span class="line">        <span class="keyword">if</span> labels.size:</span><br><span class="line">            <span class="comment"># 将label从x, y, w, h转换成x1, y1, x2, y2</span></span><br><span class="line">            labels[:, <span class="number">1</span>:] = xywhn2xyxy(labels[:, <span class="number">1</span>:], w, h, padw, padh)  <span class="comment"># normalized xywh to pixel xyxy format</span></span><br><span class="line">        labels4.append(labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Concat/clip labels</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(labels4):</span><br><span class="line">        <span class="comment"># 把四张图片的label进行合并</span></span><br><span class="line">        labels4 = np.concatenate(labels4, <span class="number">0</span>)</span><br><span class="line">        np.clip(labels4[:, <span class="number">1</span>:], <span class="number">0</span>, <span class="number">2</span> * s, out=labels4[:, <span class="number">1</span>:])  <span class="comment"># use with random_perspective</span></span><br><span class="line">        <span class="comment"># img4, labels4 = replicate(img4, labels4)  # replicate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Augment  对图片做仿射变换或透视变换，由self.hyp[&#x27;perspective&#x27;]决定</span></span><br><span class="line">    img4, labels4 = random_perspective(img4, labels4,</span><br><span class="line">                                       degrees=self.hyp[<span class="string">&#x27;degrees&#x27;</span>],</span><br><span class="line">                                       translate=self.hyp[<span class="string">&#x27;translate&#x27;</span>],</span><br><span class="line">                                       scale=self.hyp[<span class="string">&#x27;scale&#x27;</span>],</span><br><span class="line">                                       shear=self.hyp[<span class="string">&#x27;shear&#x27;</span>],</span><br><span class="line">                                       perspective=self.hyp[<span class="string">&#x27;perspective&#x27;</span>],</span><br><span class="line">                                       border=self.mosaic_border)  <span class="comment"># border to remove</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img4, labels4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、letterbox"><a href="#二、letterbox" class="headerlink" title="二、letterbox"></a>二、letterbox</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>在通常情况下，模型的输入尺寸都是一个固定值，如yolov5为（640，640），但是我们都知道，训练集图片的大小都是不同的，因此需要对图片的尺寸进行统一，此时，我们马上会想到一个方法，cv2.resize()，但是这个方法有一个很大的问题，它会破坏图片的纵横比（aspect ratio），如果图片的长和宽不与目标尺寸成相同比例，那么图片就会失真，结果就是我们的模型精度会收到影响。而letterbox就是在保持纵横比的前提下对图像做resize，先resize然后按需要在周围pad上0像素。说白了就是先按照比例resize到一个与目标尺寸相近的大小，然后通过pad将图片填充到目标尺寸。</p><h4 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterbox</span>(<span class="params">img, new_shape=(<span class="params"><span class="number">640</span>, <span class="number">640</span></span>), color=(<span class="params"><span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span></span>), auto=<span class="literal">True</span>, scaleFill=<span class="literal">False</span>, scaleup=<span class="literal">True</span>, stride=<span class="number">32</span></span>):</span></span><br><span class="line">    <span class="comment"># Resize and pad image while meeting stride-multiple constraints</span></span><br><span class="line">    shape = img.shape[:<span class="number">2</span>]  <span class="comment"># current shape [height, width]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(new_shape, <span class="built_in">int</span>):</span><br><span class="line">        new_shape = (new_shape, new_shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scale ratio (new / old)</span></span><br><span class="line">    <span class="comment"># 计算需要resize的比例，取原始图片大小与目标尺寸长宽比值里较小的一个</span></span><br><span class="line">    r = <span class="built_in">min</span>(new_shape[<span class="number">0</span>] / shape[<span class="number">0</span>], new_shape[<span class="number">1</span>] / shape[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 如果在测试的时候原始图片尺寸小于目标尺寸，则进行等比例变换，这是为了得到更高的map</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> scaleup:  <span class="comment"># only scale down, do not scale up (for better test mAP)</span></span><br><span class="line">        r = <span class="built_in">min</span>(r, <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute padding</span></span><br><span class="line">    ratio = r, r  <span class="comment"># width, height ratios</span></span><br><span class="line">    <span class="comment"># 计算新图片按比例resize的大小</span></span><br><span class="line">    new_unpad = <span class="built_in">int</span>(<span class="built_in">round</span>(shape[<span class="number">1</span>] * r)), <span class="built_in">int</span>(<span class="built_in">round</span>(shape[<span class="number">0</span>] * r))</span><br><span class="line">    <span class="comment"># 计算长和宽分别有多少像素需要填充</span></span><br><span class="line">    dw, dh = new_shape[<span class="number">1</span>] - new_unpad[<span class="number">0</span>], new_shape[<span class="number">0</span>] - new_unpad[<span class="number">1</span>]  <span class="comment"># wh padding</span></span><br><span class="line">    <span class="keyword">if</span> auto:  <span class="comment"># minimum rectangle</span></span><br><span class="line">        dw, dh = np.mod(dw, stride), np.mod(dh, stride)  <span class="comment"># wh padding</span></span><br><span class="line">    <span class="keyword">elif</span> scaleFill:  <span class="comment"># stretch</span></span><br><span class="line">        dw, dh = <span class="number">0.0</span>, <span class="number">0.0</span></span><br><span class="line">        new_unpad = (new_shape[<span class="number">1</span>], new_shape[<span class="number">0</span>])</span><br><span class="line">       <span class="comment"># 计算原始图片尺寸与目标尺寸的纵横比</span></span><br><span class="line">        ratio = new_shape[<span class="number">1</span>] / shape[<span class="number">1</span>], new_shape[<span class="number">0</span>] / shape[<span class="number">0</span>]  <span class="comment"># width, height ratios</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将长和宽分别分成两个部分，长分成左右填充到图片中，宽分成上和下填充到图片中</span></span><br><span class="line">    dw /= <span class="number">2</span>  <span class="comment"># divide padding into 2 sides</span></span><br><span class="line">    dh /= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> shape[::-<span class="number">1</span>] != new_unpad:  <span class="comment"># resize</span></span><br><span class="line">        img = cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 对填充大小四舍五入取整</span></span><br><span class="line">    top, bottom = <span class="built_in">int</span>(<span class="built_in">round</span>(dh - <span class="number">0.1</span>)), <span class="built_in">int</span>(<span class="built_in">round</span>(dh + <span class="number">0.1</span>))</span><br><span class="line">    left, right = <span class="built_in">int</span>(<span class="built_in">round</span>(dw - <span class="number">0.1</span>)), <span class="built_in">int</span>(<span class="built_in">round</span>(dw + <span class="number">0.1</span>))</span><br><span class="line">    <span class="comment"># 填充像素</span></span><br><span class="line">    img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)  <span class="comment"># add border</span></span><br><span class="line">    <span class="keyword">return</span> img, ratio, (dw, dh)</span><br></pre></td></tr></table></figure><h3 id="三、augment-hsv"><a href="#三、augment-hsv" class="headerlink" title="三、augment_hsv"></a>三、augment_hsv</h3><p>对hsv色彩空间进行增强</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r = np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>) * [hgain, sgain, vgain] + <span class="number">1</span>  <span class="comment"># random gains</span></span><br><span class="line">   hue, sat, val = cv2.split(cv2.cvtColor(img, cv2.COLOR_BGR2HSV))</span><br><span class="line">   dtype = img.dtype  <span class="comment"># uint8</span></span><br><span class="line"></span><br><span class="line">   x = np.arange(<span class="number">0</span>, <span class="number">256</span>, dtype=np.int16)</span><br><span class="line">   lut_hue = ((x * r[<span class="number">0</span>]) % <span class="number">180</span>).astype(dtype)</span><br><span class="line">   lut_sat = np.clip(x * r[<span class="number">1</span>], <span class="number">0</span>, <span class="number">255</span>).astype(dtype)</span><br><span class="line">   lut_val = np.clip(x * r[<span class="number">2</span>], <span class="number">0</span>, <span class="number">255</span>).astype(dtype)</span><br><span class="line"></span><br><span class="line">   img_hsv = cv2.merge((cv2.LUT(hue, lut_hue), cv2.LUT(sat, lut_sat), cv2.LUT(val, lut_val))).astype(dtype)</span><br><span class="line">   cv2.cvtColor(img_hsv, cv2.COLOR_HSV2BGR, dst=img)  <span class="comment"># no return needed</span></span><br></pre></td></tr></table></figure><h3 id="四、cutout"><a href="#四、cutout" class="headerlink" title="四、cutout"></a>四、cutout</h3><p>对样本的随机区域进行擦除，并填充0像素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cutout</span>(<span class="params">image, labels</span>):</span></span><br><span class="line">    <span class="comment"># Applies image cutout augmentation https://arxiv.org/abs/1708.04552</span></span><br><span class="line">    h, w = image.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bbox_ioa</span>(<span class="params">box1, box2</span>):</span></span><br><span class="line">        <span class="comment"># Returns the intersection over box2 area given box1, box2. box1 is 4, box2 is nx4. boxes are x1y1x2y2</span></span><br><span class="line">        box2 = box2.transpose()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the coordinates of bounding boxes</span></span><br><span class="line">        b1_x1, b1_y1, b1_x2, b1_y2 = box1[<span class="number">0</span>], box1[<span class="number">1</span>], box1[<span class="number">2</span>], box1[<span class="number">3</span>]</span><br><span class="line">        b2_x1, b2_y1, b2_x2, b2_y2 = box2[<span class="number">0</span>], box2[<span class="number">1</span>], box2[<span class="number">2</span>], box2[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Intersection area</span></span><br><span class="line">        inter_area = (np.minimum(b1_x2, b2_x2) - np.maximum(b1_x1, b2_x1)).clip(<span class="number">0</span>) * \</span><br><span class="line">                     (np.minimum(b1_y2, b2_y2) - np.maximum(b1_y1, b2_y1)).clip(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># box2 area</span></span><br><span class="line">        box2_area = (b2_x2 - b2_x1) * (b2_y2 - b2_y1) + <span class="number">1e-16</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Intersection over box2 area</span></span><br><span class="line">        <span class="keyword">return</span> inter_area / box2_area</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create random masks</span></span><br><span class="line">    scales = [<span class="number">0.5</span>] * <span class="number">1</span> + [<span class="number">0.25</span>] * <span class="number">2</span> + [<span class="number">0.125</span>] * <span class="number">4</span> + [<span class="number">0.0625</span>] * <span class="number">8</span> + [<span class="number">0.03125</span>] * <span class="number">16</span>  <span class="comment"># image size fraction</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> scales:</span><br><span class="line">        mask_h = random.randint(<span class="number">1</span>, <span class="built_in">int</span>(h * s))</span><br><span class="line">        mask_w = random.randint(<span class="number">1</span>, <span class="built_in">int</span>(w * s))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># box</span></span><br><span class="line">        xmin = <span class="built_in">max</span>(<span class="number">0</span>, random.randint(<span class="number">0</span>, w) - mask_w // <span class="number">2</span>)</span><br><span class="line">        ymin = <span class="built_in">max</span>(<span class="number">0</span>, random.randint(<span class="number">0</span>, h) - mask_h // <span class="number">2</span>)</span><br><span class="line">        xmax = <span class="built_in">min</span>(w, xmin + mask_w)</span><br><span class="line">        ymax = <span class="built_in">min</span>(h, ymin + mask_h)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># apply random color mask</span></span><br><span class="line">        image[ymin:ymax, xmin:xmax] = [random.randint(<span class="number">64</span>, <span class="number">191</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># return unobscured labels</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(labels) <span class="keyword">and</span> s &gt; <span class="number">0.03</span>:</span><br><span class="line">            box = np.array([xmin, ymin, xmax, ymax], dtype=np.float32)</span><br><span class="line">            ioa = bbox_ioa(box, labels[:, <span class="number">1</span>:<span class="number">5</span>])  <span class="comment"># intersection over area</span></span><br><span class="line">            labels = labels[ioa &lt; <span class="number">0.60</span>]  <span class="comment"># remove &gt;60% obscured labels</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> labels</span><br></pre></td></tr></table></figure><h3 id="五、随机水平翻转和垂直翻转"><a href="#五、随机水平翻转和垂直翻转" class="headerlink" title="五、随机水平翻转和垂直翻转"></a>五、随机水平翻转和垂直翻转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.augment:</span><br><span class="line">    <span class="comment"># flip up-down</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &lt; hyp[<span class="string">&#x27;flipud&#x27;</span>]:</span><br><span class="line">        img = np.flipud(img)</span><br><span class="line">        <span class="keyword">if</span> nL:</span><br><span class="line">            labels[:, <span class="number">2</span>] = <span class="number">1</span> - labels[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># flip left-right</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &lt; hyp[<span class="string">&#x27;fliplr&#x27;</span>]:</span><br><span class="line">        img = np.fliplr(img)</span><br><span class="line">        <span class="keyword">if</span> nL:</span><br><span class="line">            labels[:, <span class="number">1</span>] = <span class="number">1</span> - labels[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">labels_out = torch.zeros((nL, <span class="number">6</span>))     </span><br></pre></td></tr></table></figure><h3 id="六、随机仿射变换"><a href="#六、随机仿射变换" class="headerlink" title="六、随机仿射变换"></a>六、随机仿射变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_perspective</span>(<span class="params">img, targets=(<span class="params"></span>), degrees=<span class="number">10</span>, translate=<span class="number">.1</span>, scale=<span class="number">.1</span>, shear=<span class="number">10</span>, perspective=<span class="number">0.0</span>, border=(<span class="params"><span class="number">0</span>, <span class="number">0</span></span>)</span>):</span></span><br><span class="line">    <span class="comment"># torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))</span></span><br><span class="line">    <span class="comment"># targets = [cls, xyxy]</span></span><br><span class="line"></span><br><span class="line">    height = img.shape[<span class="number">0</span>] + border[<span class="number">0</span>] * <span class="number">2</span>  <span class="comment"># shape(h,w,c)</span></span><br><span class="line">    width = img.shape[<span class="number">1</span>] + border[<span class="number">1</span>] * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Center</span></span><br><span class="line">    C = np.eye(<span class="number">3</span>)</span><br><span class="line">    C[<span class="number">0</span>, <span class="number">2</span>] = -img.shape[<span class="number">1</span>] / <span class="number">2</span>  <span class="comment"># x translation (pixels)</span></span><br><span class="line">    C[<span class="number">1</span>, <span class="number">2</span>] = -img.shape[<span class="number">0</span>] / <span class="number">2</span>  <span class="comment"># y translation (pixels)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perspective</span></span><br><span class="line">    P = np.eye(<span class="number">3</span>)</span><br><span class="line">    P[<span class="number">2</span>, <span class="number">0</span>] = random.uniform(-perspective, perspective)  <span class="comment"># x perspective (about y)</span></span><br><span class="line">    P[<span class="number">2</span>, <span class="number">1</span>] = random.uniform(-perspective, perspective)  <span class="comment"># y perspective (about x)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rotation and Scale</span></span><br><span class="line">    R = np.eye(<span class="number">3</span>)</span><br><span class="line">    a = random.uniform(-degrees, degrees)</span><br><span class="line">    <span class="comment"># a += random.choice([-180, -90, 0, 90])  # add 90deg rotations to small rotations</span></span><br><span class="line">    s = random.uniform(<span class="number">1</span> - scale, <span class="number">1</span> + scale)</span><br><span class="line">    <span class="comment"># s = 2 ** random.uniform(-scale, scale)</span></span><br><span class="line">    R[:<span class="number">2</span>] = cv2.getRotationMatrix2D(angle=a, center=(<span class="number">0</span>, <span class="number">0</span>), scale=s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Shear</span></span><br><span class="line">    S = np.eye(<span class="number">3</span>)</span><br><span class="line">    S[<span class="number">0</span>, <span class="number">1</span>] = math.tan(random.uniform(-shear, shear) * math.pi / <span class="number">180</span>)  <span class="comment"># x shear (deg)</span></span><br><span class="line">    S[<span class="number">1</span>, <span class="number">0</span>] = math.tan(random.uniform(-shear, shear) * math.pi / <span class="number">180</span>)  <span class="comment"># y shear (deg)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Translation</span></span><br><span class="line">    T = np.eye(<span class="number">3</span>)</span><br><span class="line">    T[<span class="number">0</span>, <span class="number">2</span>] = random.uniform(<span class="number">0.5</span> - translate, <span class="number">0.5</span> + translate) * width  <span class="comment"># x translation (pixels)</span></span><br><span class="line">    T[<span class="number">1</span>, <span class="number">2</span>] = random.uniform(<span class="number">0.5</span> - translate, <span class="number">0.5</span> + translate) * height  <span class="comment"># y translation (pixels)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Combined rotation matrix</span></span><br><span class="line">    M = T @ S @ R @ P @ C  <span class="comment"># order of operations (right to left) is IMPORTANT</span></span><br><span class="line">    <span class="keyword">if</span> (border[<span class="number">0</span>] != <span class="number">0</span>) <span class="keyword">or</span> (border[<span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">or</span> (M != np.eye(<span class="number">3</span>)).<span class="built_in">any</span>():  <span class="comment"># image changed</span></span><br><span class="line">        <span class="keyword">if</span> perspective:</span><br><span class="line">            img = cv2.warpPerspective(img, M, dsize=(width, height), borderValue=(<span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span>))</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># affine</span></span><br><span class="line">            img = cv2.warpAffine(img, M[:<span class="number">2</span>], dsize=(width, height), borderValue=(<span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Visualize</span></span><br><span class="line">    <span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line">    <span class="comment"># ax = plt.subplots(1, 2, figsize=(12, 6))[1].ravel()</span></span><br><span class="line">    <span class="comment"># ax[0].imshow(img[:, :, ::-1])  # base</span></span><br><span class="line">    <span class="comment"># ax[1].imshow(img2[:, :, ::-1])  # warped</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Transform labels coordinates</span></span><br><span class="line">    n = <span class="built_in">len</span>(targets)</span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        <span class="comment"># warp points</span></span><br><span class="line">        xy = np.ones((n * <span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">        xy[:, :<span class="number">2</span>] = targets[:, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]].reshape(n * <span class="number">4</span>, <span class="number">2</span>)  <span class="comment"># x1y1, x2y2, x1y2, x2y1</span></span><br><span class="line">        xy = xy @ M.T  <span class="comment"># transform</span></span><br><span class="line">        <span class="keyword">if</span> perspective:</span><br><span class="line">            xy = (xy[:, :<span class="number">2</span>] / xy[:, <span class="number">2</span>:<span class="number">3</span>]).reshape(n, <span class="number">8</span>)  <span class="comment"># rescale</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># affine</span></span><br><span class="line">            xy = xy[:, :<span class="number">2</span>].reshape(n, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create new boxes</span></span><br><span class="line">        x = xy[:, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]]</span><br><span class="line">        y = xy[:, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]]</span><br><span class="line">        xy = np.concatenate((x.<span class="built_in">min</span>(<span class="number">1</span>), y.<span class="built_in">min</span>(<span class="number">1</span>), x.<span class="built_in">max</span>(<span class="number">1</span>), y.<span class="built_in">max</span>(<span class="number">1</span>))).reshape(<span class="number">4</span>, n).T</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # apply angle-based reduction of bounding boxes</span></span><br><span class="line">        <span class="comment"># radians = a * math.pi / 180</span></span><br><span class="line">        <span class="comment"># reduction = max(abs(math.sin(radians)), abs(math.cos(radians))) ** 0.5</span></span><br><span class="line">        <span class="comment"># x = (xy[:, 2] + xy[:, 0]) / 2</span></span><br><span class="line">        <span class="comment"># y = (xy[:, 3] + xy[:, 1]) / 2</span></span><br><span class="line">        <span class="comment"># w = (xy[:, 2] - xy[:, 0]) * reduction</span></span><br><span class="line">        <span class="comment"># h = (xy[:, 3] - xy[:, 1]) * reduction</span></span><br><span class="line">        <span class="comment"># xy = np.concatenate((x - w / 2, y - h / 2, x + w / 2, y + h / 2)).reshape(4, n).T</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># clip boxes</span></span><br><span class="line">        xy[:, [<span class="number">0</span>, <span class="number">2</span>]] = xy[:, [<span class="number">0</span>, <span class="number">2</span>]].clip(<span class="number">0</span>, width)</span><br><span class="line">        xy[:, [<span class="number">1</span>, <span class="number">3</span>]] = xy[:, [<span class="number">1</span>, <span class="number">3</span>]].clip(<span class="number">0</span>, height)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># filter candidates</span></span><br><span class="line">        i = box_candidates(box1=targets[:, <span class="number">1</span>:<span class="number">5</span>].T * s, box2=xy.T)</span><br><span class="line">        targets = targets[i]</span><br><span class="line">        targets[:, <span class="number">1</span>:<span class="number">5</span>] = xy[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img, targets</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/93822508">https://zhuanlan.zhihu.com/p/93822508</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Data Augmentation </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
